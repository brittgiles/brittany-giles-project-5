{"version":3,"sources":["Header.js","Footer.js","Canvas.js","firebaseApp.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","id","Component","Footer","Canvas","props","canvas","this","refs","ctx","getContext","img","onload","imgWidth","naturalWidth","imgHeight","naturalHeight","clearRect","width","height","drawImage","src","alt","ref","tabindex","aria-label","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleClick","randomArtObject","state","art","Math","floor","random","length","setState","randomArt","handleChange","e","userInput","target","value","handleFormSubmit","preventDefault","database","push","resetButton","dbKey","child","remove","caption","axios","method","url","responseType","params","key","format","q","ps","imgonly","then","response","data","artObjects","on","captionFromDb","val","action","onSubmit","for","type","placeholder","onChange","onClick","webImage","longTitle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.39a2d6a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"wrapper\">\n          <div id=\"squareOne\" className=\"square\"></div>\n          <div id=\"squareTwo\" className=\"square\"></div>\n          <h1>Memeseum</h1>\n          <p>A generator to create your own reappraisel of art, history, and culture.</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <p>powered by Rijk's Museum API</p>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\n\nclass Canvas extends Component {\n    constructor(props){\n        super(props);\n        // react is giving a warning that this is a useless constructor but it doesn't work without it\n    }\n\n    componentDidMount(){\n        const canvas = this.refs.canvas;\n        const ctx = canvas.getContext('2d');\n        const img = this.refs.img;\n        \n        img.onload = () => {\n            const imgWidth = img.naturalWidth * 0.3;\n            const imgHeight = img.naturalHeight * 0.3;\n            \n            // clears the canvas before drawing image\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            // draws the random image on the canvas\n            ctx.drawImage(img, 0, 0, imgWidth, imgHeight);\n        }\n    }\n\n    render() {\n        // deconstructing props\n        const {\n            src,\n            alt,\n            id, \n        } = this.props\n\n        return (\n            <div>\n                <div className=\"imageContainer\">\n                    {/* canvas element that hidden image below gets painted on */}\n                    <canvas ref=\"canvas\" id=\"canvas\" width=\"600\" height=\"600\" tabindex=\"0\" aria-label={alt}>\n                       Sorry, HTML canvas is not supported on your browser. Try Firefox or Chrome.\n                    </canvas>\n                </div>\n                {/* adding class of hidden to the image div so the image can be passed to the canvas, but the image doesn't show up on the page twice  */}\n                <div className=\"hidden\">\n                    <img src={src} alt={alt} id={id} ref=\"img\" />\n                </div>\n            </div>\n            );\n        }\n    }\n\nexport default Canvas;","import firebase from 'firebase';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBRbU7xJsAXhJhpVXv9TrMWFds0d5So6nw\",\n    authDomain: \"history-meme-generator.firebaseapp.com\",\n    databaseURL: \"https://history-meme-generator.firebaseio.com\",\n    projectId: \"history-meme-generator\",\n    storageBucket: \"history-meme-generator.appspot.com\",\n    messagingSenderId: \"760039568774\",\n    appId: \"1:760039568774:web:d39feb2e31aa0da5f32807\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Header from './Header.js';\nimport Footer from './Footer.js';\nimport Canvas from './Canvas.js';\nimport firebase from './firebaseApp';\n\n//i've left my comments in to explain my code and for my own reference! have removed comments that aren't related to that\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state={\n      art: [],\n      randomArt: {},\n      userInput: '',\n      caption: '',\n      dbKey: '',\n    }\n  }\n\n  componentDidMount(){\n    // axios call for image data from API\n    axios({\n      method: 'GET',\n      url: 'https://www.rijksmuseum.nl/api/en/collection',\n      responseType: 'json',\n      params: {\n        key: `rDVuMIWC`,\n        format:'json',\n        q: 'portrait',\n        ps: '200',\n        imgonly: true,\n      }\n    }).then((response) =>{\n      // reassigning response to be more specific to clean up the data\n      response = response.data.artObjects;\n      \n      // updating state with the response from API call\n      this.setState({\n        art: response,\n      }, () => {\n          const randomArtObject = this.state.art[Math.floor(Math.random() * this.state.art.length)];\n\n          this.setState({\n            randomArt: randomArtObject,\n          })\n      })\n    })\n\n    const dbRef = firebase.database().ref();\n    // getting and saving the response from the Firebase database\n    dbRef.on('value', (caption) => {\n      const captionFromDb = caption.val();\n\n      // pulling the caption text out of the object and pushing to the empty array\n      for (let key in captionFromDb) {\n        // passing the text and the key to state\n        this.setState({\n          caption: captionFromDb[key],\n          dbKey: key,\n        });\n      }\n    })\n  }\n\n  // on click of button, get a random piece of art from API\n  handleClick = () => {\n    const randomArtObject = this.state.art[Math.floor(Math.random() * this.state.art.length)];\n\n    this.setState({\n      randomArt: randomArtObject,\n    })\n  }\n\n  // listens for change in the user input text box\n  handleChange = (e) => {\n    this.setState({\n      userInput: e.target.value,\n    })\n  }\n\n  // on form submit\n  handleFormSubmit = (e) => {\n    // prevent the form from refreshing the page\n    e.preventDefault();\n\n    // creating a reference to the firebase database\n    const dbRef = firebase.database().ref();\n\n    dbRef.push(this.state.userInput);\n    // on form submit, empty the user input\n    this.setState({\n      userInput: '',\n    })\n  }\n\n  // on click of reset button\n  resetButton = (dbKey) => {\n    const dbRef = firebase.database().ref();\n    // remove input from firebase\n    dbRef.child(dbKey).remove();\n    // reset state to empty string\n    this.setState({\n      caption: '',\n      dbKey: '',\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n          <div className=\"contentContainer wrapper\">\n            <div className=\"flexChild\">\n              {/* setting value of this.state.userInput for accessibility */}\n              <form action=\"submit\" onSubmit={this.handleFormSubmit}>\n                {/* create for SR only label */}\n                <label for=\"customText\" className=\"visuallyHidden\">Type your meme text here:</label>\n                <input type=\"text\" placeholder=\"Type your caption here\" id=\"customText\" onChange={this.handleChange} value={this.state.userInput}  />\n                <div className=\"buttonContainer\">\n                  <button type=\"submit\">Submit</button> \n                {this.state.dbKey &&\n                  <button type=\"reset\" onClick={() => { this.resetButton(this.state.dbKey) }}>Reset</button>}\n                </div>\n              </form>\n              {/* only display reset button when there is something in the database */}\n              <button id=\"getArtButton\" onClick={this.handleClick}>New Image</button>\n            </div>\n            <div className=\"canvasContainer\">\n            \n              {this.state.caption && <div className=\"memeCaption\">{this.state.caption}</div>}\n              {this.state.randomArt.webImage && <Canvas src={this.state.randomArt.webImage.url} alt={this.state.randomArt.longTitle} id={'memeImage'} /> }\n            </div>\n          </div>\n          <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}